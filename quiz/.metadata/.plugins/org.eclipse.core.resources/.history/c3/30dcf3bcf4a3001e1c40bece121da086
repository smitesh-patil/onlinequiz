package com.quiz.home.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.quiz.home.pojos.Question;
import com.quiz.home.service.QuestionService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/quizzes")

public class QuestionController {
@Autowired
private QuestionService qservice;

@PostMapping("/create-new-question")
public ResponseEntity<Question> createQuestion(@Valid @RequestBody Question question){
    Question createdQuestion = qservice.createQuestion(question);
    return ResponseEntity.status(HttpStatus.CREATED).body(createdQuestion);
}

@GetMapping("/all-questions")
public ResponseEntity<List<Question>> getAllQuestions(){
    List<Question> questions = qservice.getAllQuestions();
    return ResponseEntity.ok(questions);
}


@GetMapping("/question/{id}")
public ResponseEntity<Question> getQuestionById(@PathVariable Long id) throws ChangeSetPersister.NotFoundException {
    Optional<Question> theQuestion = qservice.getQuestionById(id);
    if (theQuestion.isPresent()){
        return ResponseEntity.ok(theQuestion.get());
    }else {
        throw new ChangeSetPersister.NotFoundException();
    }
}

@PutMapping("/question/{id}/update")
public ResponseEntity<Question> updateQuestion(
        @PathVariable Long id, @RequestBody Question question) throws ChangeSetPersister.NotFoundException {
    Question updatedQuestion = qservice.updateQuestion(id, question);
    return ResponseEntity.ok(updatedQuestion);
}

@DeleteMapping("/question/{id}/delete")
public ResponseEntity<Void> deleteQuestion(@PathVariable Long id){
   qservice.deleteQuestion(id);
    return ResponseEntity.noContent().build();
}

@GetMapping("/subjects")
public ResponseEntity<List<String>> getAllSubjects(){
    List<String> subjects = qservice.getAllSubjects();
    return ResponseEntity.ok(subjects);
}
}
